.react-aria-Form {
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.react-aria-TextField {
	display: flex;
	flex-direction: column;
}

.react-aria-Input {
	padding: 0.5rem;
	background-color: var(--bg-color-2);
	border: 2px solid #ccc;
	border-radius: 0.5rem;
	color: var(--text-color-1);

	&[data-focused] {
		outline: none;
		border-bottom: 2px solid var(--brand-color);
	}
}

.react-aria-Label {
	font-size: 0.9rem;
	padding: 0.1rem 0.25rem;
}

.react-aria-FieldError {
	padding: 0.2rem;
	color: var(--red-color);
	font-size: 0.8rem;
}

.react-aria-Button {
	position: relative; /* Required for pseudo-element positioning */
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 1rem;
	gap: 0.5rem;
	border: none;
	border-radius: 10rem;
	background-color: var(--brand-color);
	color: black;
	font-size: 1.2rem;
	cursor: pointer;
	transition: ease-in-out 200ms;
	overflow: hidden;
	box-shadow: 0 0 10px 0.1px var(--bg-color-3);
	min-width: 54.4px;
	min-height: 54.4px;

	& span {
		font-size: 1rem;
		position: relative; /* Ensures the span stays above the pseudo-element */
		z-index: 1;
	}

	&::before {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		width: 200px;
		height: 200px;
		background-color: rgba(255, 255, 255, 0.3); /* Bubble effect color */
		border-radius: 50%;
		transform: translate(-50%, -50%) scale(0);
		transition: transform 200ms ease-in-out;
		pointer-events: none; /* Ensures the pseudo-element doesn't interfere with clicks */
	}

	&[data-hovered]::before,
	&[data-focused]::before {
		transform: translate(-50%, -50%) scale(1.5); /* Adjust scale for bubble size */
	}

	&[data-hovered],
	&[data-focused] {
		background-color: rgba(139, 102, 185, 0.9);
		transform: scale(1.02);
		box-shadow: 0 0 20px 0.5px var(--bg-color-3);
	}

	&[data-pressed] {
		background-color: var(--brand-color);
		transform: scale(0.95);
	}

	&[data-pressed]::before {
		transform: translate(-50%, -50%) scale(0); /* Hide bubble effect on press */
	}

	&[data-disabled] {
		opacity: 0.6;
		cursor: not-allowed;
		background-color: var(--text-color-2);

		&::before {
			display: none; /* Hide bubble effect when disabled */
		}
	}
}

.react-aria-ToggleButton {
	position: relative; /* Required for pseudo-element positioning */
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 1rem;
	gap: 0.5rem;
	border: none;
	border-radius: 10rem;
	background-color: transparent;
	color: var(--text-color-1);
	font-size: 1.2rem;
	cursor: pointer;
	transition: ease-in-out 200ms;
	overflow: hidden;
	box-shadow: 0 0 10px 0.1px var(--bg-color-3);
	min-width: 54.4px;
	min-height: 54.4px;

	& span {
		font-size: 1rem;
		position: relative; /* Ensures the span stays above the pseudo-element */
		z-index: 1;
	}

	&::before {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		width: 200px;
		height: 200px;
		background-color: rgba(255, 255, 255, 0.3); /* Bubble effect color */
		border-radius: 50%;
		transform: translate(-50%, -50%) scale(0);
		transition: transform 200ms ease-in-out;
		pointer-events: none; /* Ensures the pseudo-element doesn't interfere with clicks */
	}

	&[data-hovered]::before,
	&[data-focused]::before {
		transform: translate(-50%, -50%) scale(1.5); /* Adjust scale for bubble size */
	}

	&[data-hovered],
	&[data-focused] {
		background-color: var(--bg-color-3);
		transform: scale(1.02);
		box-shadow: 0 0 20px 0.5px var(--bg-color-3);
	}

	&[data-pressed] {
		background-color: var(--brand-color);
		transform: scale(0.95);
	}

	&[data-pressed]::before {
		transform: translate(-50%, -50%) scale(0); /* Hide bubble effect on press */
	}

	&[data-disabled] {
		opacity: 0.6;
		cursor: not-allowed;
		background-color: transparent;
		color: var(--text-color-2);

		&::before {
			display: none; /* Hide bubble effect when disabled */
		}
	}
}

.react-aria-ToggleButton[data-selected] {
	background-color: var(--brand-color);
	color: black;

	&[data-hovered],
	&[data-focused] {
		background-color: rgba(139, 102, 185, 0.9);
	}
}

.react-aria-Switch {
	display: flex;
	align-items: center;
	cursor: pointer;
	gap: 0.75rem;
	position: relative;
	min-height: 2rem;

	.indicator {
		display: flex;
		align-items: center;
		padding: 0.15rem;
		width: 2.5rem;
		height: 1.5rem;
		border: 2px solid var(--bg-color-3);
		background-color: var(--bg-color-3);
		border-radius: 1rem;
		transition: background-color 300ms ease, border-color 300ms ease;
		flex-shrink: 0;

		&:before {
			content: "";
			display: block;
			width: 1rem;
			height: 1rem;
			background: white;
			border-radius: 50%;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
			transition: transform 300ms ease, box-shadow 300ms ease;
			transform: translateX(0);
		}
	}

	&[data-selected] {
		.indicator {
			background-color: var(--brand-color);
			border-color: var(--brand-color);

			&:before {
				background-color: white;
				transform: translateX(0.8rem);
				box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
			}
		}
	}

	&[data-disabled] {
		opacity: 0.6;
		cursor: not-allowed;

		.indicator {
			border-color: var(--bg-color-3);
			background-color: var(--bg-color-3);

			&:before {
				background-color: var(--text-color-2);
				box-shadow: none;
			}
		}
	}

	&[data-hovered]:not([data-disabled]) {
		.indicator {
			box-shadow: 0 0 0 2px rgba(139, 102, 185, 0.2);
		}
	}
}

.react-aria-Slider {
	display: grid;
	grid-template-areas:
		"label output"
		"track track";
	grid-template-columns: 1fr auto;
	margin: 1rem 0;

	.react-aria-Label {
		grid-area: label;
		font-weight: 500;
		margin-bottom: 0.5rem;
	}

	.react-aria-SliderOutput {
		grid-area: output;
		background-color: var(--bg-color-3);
		padding: 0.25rem 0.5rem;
		border-radius: 0.5rem;
		font-size: 0.9rem;
		min-width: 2rem;
		text-align: center;
	}

	.react-aria-SliderTrack {
		grid-area: track;
		position: relative;
		margin: 0.5rem 0;

		/* track line */
		&:before {
			content: "";
			display: block;
			position: absolute;
			background-color: var(--text-color-2);
			opacity: 0.6;
			border-radius: 1rem;
		}

		/* filled part of track */
		&:after {
			content: "";
			display: block;
			position: absolute;
			background-color: var(--brand-color);
			opacity: 0.3;
			border-radius: 1rem;
			z-index: 1;
		}
	}

	.react-aria-SliderThumb {
		width: calc(2.24rem - 2px);
		height: calc(1.3rem - 2px);
		border-radius: 1rem;
		background-color: var(--brand-color);
		forced-color-adjust: none;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
		transition:
			transform 0.15s ease,
			box-shadow 0.15s ease;
		z-index: 2;

		&[data-dragging],
		&[data-focus-visible] {
			transform: scale(1.1);
			box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
		}
	}

	&[data-orientation="horizontal"] {
		flex-direction: column;
		justify-content: center;
		width: 100%;

		.react-aria-SliderTrack {
			height: 30px;
			width: 90%;

			&:before {
				height: 4px;
				width: 100%;
				top: 50%;
				transform: translateY(-50%);
			}

			&:after {
				height: 4px;
				left: 0;
				top: 50%;
				transform: translateY(-50%);
				/* Width will be set via JavaScript based on value */
			}
		}

		.react-aria-SliderThumb {
			top: 50%;
		}
	}

	&[data-disabled] {
		opacity: 0.6;

		.react-aria-SliderThumb {
			background-color: var(--text-color-2);
		}
	}
}

/* Dialog styles */
.react-aria-Modal {
	position: fixed;
	inset: 0;
	z-index: 50;
	display: flex;
	align-items: center;
	justify-content: center;
	background-color: rgba(0, 0, 0, 0.5);
}

.react-aria-Dialog {
	background: var(--bg-color-2);
	padding: 1.5rem;
	border-radius: 0.5rem;
	box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
	max-width: 28rem;
	width: 100%;
	outline: none;
}

.react-aria-Dialog[role="alertdialog"] {
	display: flex;
	flex-direction: column;
	gap: 0.5rem;
}

.react-aria-ToggleButtonGroup[data-orientation="horizontal"] {
	display: flex;
	flex-direction: row;
	gap: 0.5rem;

	& .react-aria-ToggleButton {
		border-radius: 0.5rem;
		justify-content: center;

		&:first-of-type {
			border-top-left-radius: 25px;
			border-bottom-left-radius: 25px;
		}

		&:last-of-type {
			border-top-right-radius: 25px;
			border-bottom-right-radius: 25px;
		}
	}
}

.react-aria-ToggleButtonGroup[data-orientation="vertical"] {
	display: flex;
	flex-direction: column;
	gap: 0.5rem;

	& .react-aria-ToggleButton {
		width: 100%;
		border-radius: 0.5rem;
		justify-content: flex-start;

		&:first-of-type {
			border-top-left-radius: 25px;
			border-top-right-radius: 25px;
		}

		&:last-of-type {
			border-bottom-left-radius: 25px;
			border-bottom-right-radius: 25px;
		}
	}
}

/* Disclosure styles */
.react-aria-Disclosure {
	display: flex;
	flex-direction: column;
	border-radius: 1rem;
	margin: 0.5rem 0;
	padding: 0.5rem;
	contain: layout; /* Prevent layout shifts from affecting parent */
}

.react-aria-Disclosure:has(.react-aria-DisclosurePanel[aria-hidden="false"]) {
	background-color: rgba(139, 102, 185, 0.05); /* Very subtle brand color background */
	border-radius: 1rem;
	padding: 0.75rem;
}

.react-aria-DisclosurePanel {
	display: flex;
	flex-direction: column;
	gap: 1rem;
	overflow: hidden;
	/* Remove all transitions and animations - instant show/hide */
	transition: none !important;
	animation: none !important;
	transform: none !important;
}

.react-aria-DisclosurePanel[aria-hidden="true"] {
	display: none;
}

.react-aria-DisclosurePanel[aria-hidden="false"] {
	display: flex;
	padding: 0.75rem 0 0 0;
	margin-top: 0.5rem;
}

/* Override any default React Aria animations on disclosure elements */
.react-aria-Disclosure * {
	animation: none !important;
}



/* Animations */
@keyframes fadeIn {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes fadeOut {
	from {
		opacity: 1;
	}
	to {
		opacity: 0;
	}
}

@keyframes slideIn {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes slideOut {
	from {
		opacity: 1;
		transform: translateY(0);
	}
	to {
		opacity: 0;
		transform: translateY(-10px);
	}
}

/* Select component styles */
.react-aria-Select {
	display: flex;
	flex-direction: column;
	gap: 0.5rem;
	margin: 1rem 0;

	.react-aria-Label {
		font-size: 0.9rem;
		padding: 0.1rem 0.25rem;
	}

	.react-aria-Button {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem;
		background-color: var(--bg-color-2);
		border: 2px solid #ccc;
		border-radius: 0.5rem;
		color: var(--text-color-1);
		font-size: 1rem;
		cursor: pointer;
		transition: border-color 200ms;
		min-height: 44px;

		&[data-focused] {
			outline: none;
			border-color: var(--brand-color);
		}

		&[data-disabled] {
			opacity: 0.6;
			cursor: not-allowed;
		}
	}
}

.react-aria-Popover {
	background-color: var(--bg-color-2);
	border-radius: 0.5rem;
	box-shadow: 0 0 10px 0.1px var(--brand-color);
	border: 1px solid var(--bg-color-3);
	overflow: hidden;
	z-index: 1000;

	&[data-entering] {
		animation: popover-enter 200ms ease-out;
	}

	&[data-exiting] {
		animation: popover-exit 150ms ease-in;
	}
}

.react-aria-ListBox {
	outline: none;
	max-height: 200px;
	overflow-y: auto;
	padding: 0.5rem 0;
}

.react-aria-ListBoxItem {
	padding: 0.75rem 1rem;
	cursor: pointer;
	color: var(--text-color-1);
	transition: background-color 200ms;

	&[data-focused] {
		background-color: var(--brand-color);
		color: black;
		outline: none;
	}

	&[data-selected] {
		background-color: var(--brand-color);
		color: black;
		font-weight: 600;
	}

	&[data-disabled] {
		opacity: 0.6;
		cursor: not-allowed;
	}
}

@keyframes popover-enter {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

@keyframes popover-exit {
	from {
		opacity: 1;
		transform: translateY(0);
	}
	to {
		opacity: 0;
		transform: translateY(-10px);
	}
}
